// Generated by CoffeeScript 1.7.1
var ARRAY_METHODS, OBSERVER, SIGNAL, dependencyStack, global;

SIGNAL = "SIGNAL";

OBSERVER = "OBSERVER";

ARRAY_METHODS = ["pop", "push", "reverse", "shift", "sort", "splice", "unshift"];

global = typeof exports !== "undefined" && exports !== null ? exports : this;

dependencyStack = [];

global.Signal = function(definition) {
  var signalCore, signalInterface;
  signalCore = {
    definition: null,
    value: null,
    dependencies: [],
    dependencyType: SIGNAL,
    dependents: [],
    observers: [],
    evaluate: function() {
      var dependency, dependentIndex, _i, _len, _ref;
      _ref = this.dependencies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependency = _ref[_i];
        dependentIndex = dependency.dependents.indexOf(this);
        dependency.dependents[dependentIndex] = null;
      }
      this.dependencies = [];
      if (this.definition instanceof Function) {
        dependencyStack.push(this);
        this.value = this.definition();
        return dependencyStack.pop();
      } else {
        return this.value = this.definition;
      }
    },
    propagate: function(observerList) {
      var dependency, _i, _len, _ref;
      observerList.push.apply(observerList, this.observers);
      _ref = this.dependents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependency = _ref[_i];
        if (!(dependency != null)) {
          continue;
        }
        dependency.evaluate();
        dependency.propagate(observerList);
      }
      return observerList;
    },
    read: function() {
      var dependent;
      dependent = dependencyStack[dependencyStack.length - 1];
      if ((dependent != null) && dependent.dependencyType === SIGNAL) {
        if (this.dependents.indexOf(dependent) < 0) {
          this.dependents.push(dependent);
        }
        if (dependent.dependencies.indexOf(this) < 0) {
          dependent.dependencies.push(this);
        }
      } else if ((dependent != null) && dependent.dependencyType === OBSERVER) {
        if (this.observers.indexOf(dependent) < 0) {
          this.observers.push(dependent);
        }
        if (dependent.observees.indexOf(this) < 0) {
          dependent.observees.push(this);
        }
      }
      return this.value;
    },
    write: function(newDefinition) {
      var observer, observerList, _i, _len;
      this.definition = newDefinition;
      this.evaluate();
      observerList = this.propagate([]);
      for (_i = 0, _len = observerList.length; _i < _len; _i++) {
        observer = observerList[_i];
        observer.trigger();
      }
      return this.value;
    }
  };
  signalInterface = function(newDefinition) {
    if (newDefinition === void 0) {
      return signalCore.read();
    } else {
      return signalCore.write(newDefinition);
    }
  };
  signalCore.write(definition);
  return signalInterface;
};

global.Observer = function(response) {
  var observerCore, observerInterface;
  observerCore = {
    response: null,
    dependencyType: OBSERVER,
    observees: [],
    trigger: function() {
      var observee, observerIndex, _i, _len, _ref;
      _ref = this.observees;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observee = _ref[_i];
        observerIndex = observee.observers.indexOf(this);
        observee.observers[observerIndex] = null;
      }
      this.observees = [];
      if (response instanceof Function) {
        dependencyStack.push(this);
        this.response();
        return dependencyStack.pop();
      }
    },
    write: function(newResponse) {
      this.response = newResponse;
      return this.trigger();
    }
  };
  observerInterface = function(newResponse) {
    return write(newResponse);
  };
  observerCore.write(response);
  return observerInterface;
};
