// Generated by CoffeeScript 1.7.1
(function() {
  var ARRAY_METHODS, OBSERVER, SIGNAL, dependencyStack, global;

  SIGNAL = "SIGNAL";

  OBSERVER = "OBSERVER";

  ARRAY_METHODS = ["pop", "push", "reverse", "shift", "sort", "splice", "unshift"];

  global = typeof exports !== "undefined" && exports !== null ? exports : this;

  dependencyStack = [];

  global.Signal = function(definition) {
    var signalCore, signalInterface;
    signalCore = {
      definition: null,
      value: null,
      dependencies: [],
      dependencyType: SIGNAL,
      dependents: [],
      observers: [],
      evaluate: function() {
        var dependency, dependentIndex, _i, _len, _ref;
        _ref = this.dependencies;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dependency = _ref[_i];
          dependentIndex = dependency.dependents.indexOf(this);
          dependency.dependents[dependentIndex] = null;
        }
        this.dependencies = [];
        if (this.definition instanceof Function) {
          dependencyStack.push(this);
          this.value = this.definition();
          return dependencyStack.pop();
        } else {
          return this.value = this.definition;
        }
      },
      propagate: function(observerList) {
        var dependency, observer, _i, _j, _len, _len1, _ref, _ref1;
        _ref = this.observers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          observer = _ref[_i];
          if (observerList.indexOf(observer) < 0) {
            observerList.push(observer);
          }
        }
        _ref1 = this.dependents;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dependency = _ref1[_j];
          if (!(dependency != null)) {
            continue;
          }
          dependency.evaluate();
          dependency.propagate(observerList);
        }
        return observerList;
      },
      read: function() {
        var dependent;
        dependent = dependencyStack[dependencyStack.length - 1];
        if ((dependent != null) && dependent.dependencyType === SIGNAL) {
          if (this.dependents.indexOf(dependent) < 0) {
            this.dependents.push(dependent);
          }
          if (dependent.dependencies.indexOf(this) < 0) {
            dependent.dependencies.push(this);
          }
        } else if ((dependent != null) && dependent.dependencyType === OBSERVER) {
          if (this.observers.indexOf(dependent) < 0) {
            this.observers.push(dependent);
          }
          if (dependent.observees.indexOf(this) < 0) {
            dependent.observees.push(this);
          }
        }
        return this.value;
      },
      write: function(newDefinition) {
        var methodName, observer, observerList, _fn, _i, _j, _k, _len, _len1, _len2;
        this.definition = newDefinition;
        this.evaluate();
        if (this.definition instanceof Array) {
          _fn = (function(_this) {
            return function(methodName) {
              return signalInterface[methodName] = function() {
                var observer, observerList, output, _j, _len1;
                output = _this.definition[methodName].apply(_this.definition, arguments);
                observerList = _this.propagate([]);
                for (_j = 0, _len1 = observerList.length; _j < _len1; _j++) {
                  observer = observerList[_j];
                  observer.trigger();
                }
                return output;
              };
            };
          })(this);
          for (_i = 0, _len = ARRAY_METHODS.length; _i < _len; _i++) {
            methodName = ARRAY_METHODS[_i];
            _fn(methodName);
          }
        } else {
          for (_j = 0, _len1 = ARRAY_METHODS.length; _j < _len1; _j++) {
            methodName = ARRAY_METHODS[_j];
            delete signalInterface[methodName];
          }
        }
        if (this.definition instanceof Object) {
          signalInterface.set = (function(_this) {
            return function(key, value) {
              var observer, observerList, _k, _len2;
              _this.definition[key] = value;
              observerList = _this.propagate([]);
              for (_k = 0, _len2 = observerList.length; _k < _len2; _k++) {
                observer = observerList[_k];
                observer.trigger();
              }
              return value;
            };
          })(this);
        } else {
          delete signalInterface.set;
        }
        observerList = this.propagate([]);
        for (_k = 0, _len2 = observerList.length; _k < _len2; _k++) {
          observer = observerList[_k];
          observer.trigger();
        }
        return this.value;
      }
    };
    signalInterface = function(newDefinition) {
      if (newDefinition === void 0) {
        return signalCore.read();
      } else {
        return signalCore.write(newDefinition);
      }
    };
    signalCore.write(definition);
    return signalInterface;
  };

  global.Observer = function(response) {
    var observerCore, observerInterface;
    observerCore = {
      response: null,
      dependencyType: OBSERVER,
      observees: [],
      trigger: function() {
        var observee, observerIndex, _i, _len, _ref;
        _ref = this.observees;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          observee = _ref[_i];
          observerIndex = observee.observers.indexOf(this);
          observee.observers[observerIndex] = null;
        }
        this.observees = [];
        if (response instanceof Function) {
          dependencyStack.push(this);
          this.response();
          return dependencyStack.pop();
        }
      },
      write: function(newResponse) {
        this.response = newResponse;
        return this.trigger();
      }
    };
    observerInterface = function(newResponse) {
      return write(newResponse);
    };
    observerCore.write(response);
    return observerInterface;
  };

}).call(this);
